{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","order","a","reportsArr","getDataFromLambda","lambdaReport","console","log","map","line","sortRep","fetch","then","json","arr","sort","day1","day2","day","className","onClick","getData","index","app","PaymentSheetView_appear_NATIVE","app_launch_NATIVE","app_launch_SDK","approve_NATIVE","approve_SDK","fail_NATIVE","fail_SDK","pop_SDK","purchase_NATIVE","purchase_SDK","first_launch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTA+OeA,MAvOf,WAAgB,IAAD,EAEWC,mBAAS,CAAC,EAAG,EAAG,EAAG,IAF9B,mBAENC,EAFM,KAEAC,EAFA,OAGaF,mBAAS,OAHtB,mBAGNG,EAHM,iDAKb,8BAAAC,EAAA,6DACMC,EAAa,GADnB,SAG2BC,IAH3B,OAGMC,EAHN,OAKEC,QAAQC,IAAIF,GAEZA,EAAaG,KAAI,SAACC,GAChBN,EAAU,sBAAOA,GAAP,CAAmBM,OAE/BH,QAAQC,IAAIJ,GACZO,EAAQP,GAERH,EAAQG,GAbV,4CALa,+BAqBEC,IArBF,2EAqBb,sBAAAF,EAAA,+EACSS,MAAM,+EACVC,MAAK,SAAAb,GAAI,OAAIA,EAAKc,WAFvB,4CArBa,sBA0Bb,SAASH,EAAQI,GACD,QAAVb,EACFa,EAAIC,MAAK,SAACC,EAAMC,GACd,OAAID,EAAKE,IAAMD,EAAKC,KACV,EACNF,EAAKE,IAAMD,EAAKC,IACX,OADT,KAGiB,QAAVjB,GACTa,EAAIC,MAAK,SAACC,EAAMC,GACd,OAAID,EAAKE,IAAMD,EAAKC,KACV,EACNF,EAAKE,IAAMD,EAAKC,IACX,OADT,KAON,OA7Ca,KA8CX,sBAAKC,UAAU,MAAf,UACE,0CAEA,wBAAQC,QAAS,YAjDR,mCAiDgBC,IAAzB,2BAEA,kCACE,+BACE,uBAEEtB,EAAKS,KAAI,SAACC,EAAMa,GACd,OACE,+BAAKb,EAAKc,IAAV,IAAgBd,EAAKS,UAK3B,0BAGF,+BACE,gEAEEnB,EAAKS,KAAI,SAACC,EAAMa,GACd,OACE,6BAAKb,EAAKe,uCAKlB,+BACE,mDAEEzB,EAAKS,KAAI,SAACC,EAAMa,GACd,OACE,6BAAKb,EAAKgB,0BAKlB,+BACE,gDAEE1B,EAAKS,KAAI,SAACC,EAAMa,GACd,OACE,6BAAKb,EAAKiB,uBAKlB,+BACE,gDAEE3B,EAAKS,KAAI,SAACC,EAAMa,GACd,OACE,6BAAKb,EAAKkB,uBAKlB,+BACE,6CAEE5B,EAAKS,KAAI,SAACC,EAAMa,GACd,OACE,6BAAKb,EAAKmB,oBAKlB,+BACE,6CAEE7B,EAAKS,KAAI,SAACC,EAAMa,GACd,OACE,6BAAKb,EAAKoB,oBAKlB,+BACE,0CAEE9B,EAAKS,KAAI,SAACC,EAAMa,GACd,OACE,6BAAKb,EAAKqB,iBAKlB,+BACE,yCAEE/B,EAAKS,KAAI,SAACC,EAAMa,GACd,OACE,6BAAKb,EAAKsB,gBAKlB,+BACE,iDAEEhC,EAAKS,KAAI,SAACC,EAAMa,GACd,OACE,6BAAKb,EAAKuB,wBAKlB,+BACE,8CAEEjC,EAAKS,KAAI,SAACC,EAAMa,GACd,OACE,6BAAKb,EAAKwB,qBAKlB,+BACE,8CAEElC,EAAKS,KAAI,SAACC,EAAMa,GACd,OACE,6BAAKb,EAAKyB,wBAOpB,uBACA,uBAEA,uBACA,2BCjLSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4b3fd238.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport reports from './resources/reports.json'\nimport './App.css';\nimport Line from './components/Line';\n\n\n\nfunction App() {\n\n  const [data, setData] = useState([1, 2, 3, 4])\n  const [order, setOrder] = useState('htl')\n\n  async function getData() {\n    let reportsArr = [];\n\n    let lambdaReport = await getDataFromLambda()\n\n    console.log(lambdaReport)\n\n    lambdaReport.map((line) => {\n      reportsArr = [...reportsArr, line]\n    })\n    console.log(reportsArr);\n    sortRep(reportsArr);\n\n    setData(reportsArr)\n  }\n\n  async function getDataFromLambda() {\n    return fetch('https://pqzj791d65.execute-api.us-east-1.amazonaws.com/default/reports-json')\n      .then(data => data.json())\n  }\n\n  function sortRep(arr) {\n    if (order === \"lth\") {\n      arr.sort((day1, day2) => {\n        if (day1.day < day2.day)\n          return -1;\n        if (day1.day > day2.day)\n          return 1;\n      });\n    } else if (order === \"htl\") {\n      arr.sort((day1, day2) => {\n        if (day1.day > day2.day)\n          return -1;\n        if (day1.day < day2.day)\n          return 1;\n      });\n    }\n\n  }\n\n  return (\n    <div className=\"App\">\n      <h1> Reports</h1>\n\n      <button onClick={() => { getData() }}> show reports</button>\n\n      <table>\n        <tr>\n          <th></th>\n          {\n            data.map((line, index) => {\n              return (\n                <th>{line.app} {line.day}</th>\n              )\n            })\n          }\n\n          <th></th>\n        </tr>\n\n        <tr>\n          <th>PaymentSheetView_appear_NATIVE</th>\n          {\n            data.map((line, index) => {\n              return (\n                <td>{line.PaymentSheetView_appear_NATIVE}</td>\n              )\n            })\n          }\n        </tr>\n        <tr>\n          <th>app_launch_NATIVE</th>\n          {\n            data.map((line, index) => {\n              return (\n                <td>{line.app_launch_NATIVE}</td>\n              )\n            })\n          }\n        </tr>\n        <tr>\n          <th>app_launch_SDK</th>\n          {\n            data.map((line, index) => {\n              return (\n                <td>{line.app_launch_SDK}</td>\n              )\n            })\n          }\n        </tr>\n        <tr>\n          <th>approve_NATIVE</th>\n          {\n            data.map((line, index) => {\n              return (\n                <td>{line.approve_NATIVE}</td>\n              )\n            })\n          }\n        </tr>\n        <tr>\n          <th>approve_SDK</th>\n          {\n            data.map((line, index) => {\n              return (\n                <td>{line.approve_SDK}</td>\n              )\n            })\n          }\n        </tr>\n        <tr>\n          <th>fail_NATIVE</th>\n          {\n            data.map((line, index) => {\n              return (\n                <td>{line.fail_NATIVE}</td>\n              )\n            })\n          }\n        </tr>\n        <tr>\n          <th>fail_SDK</th>\n          {\n            data.map((line, index) => {\n              return (\n                <td>{line.fail_SDK}</td>\n              )\n            })\n          }\n        </tr>\n        <tr>\n          <th>pop_SDK</th>\n          {\n            data.map((line, index) => {\n              return (\n                <td>{line.pop_SDK}</td>\n              )\n            })\n          }\n        </tr>\n        <tr>\n          <th>purchase_NATIVE</th>\n          {\n            data.map((line, index) => {\n              return (\n                <td>{line.purchase_NATIVE}</td>\n              )\n            })\n          }\n        </tr>\n        <tr>\n          <th>purchase_SDK</th>\n          {\n            data.map((line, index) => {\n              return (\n                <td>{line.purchase_SDK}</td>\n              )\n            })\n          }\n        </tr>\n        <tr>\n          <th>first_launch</th>\n          {\n            data.map((line, index) => {\n              return (\n                <td>{line.first_launch}</td>\n              )\n            })\n          }\n        </tr>\n\n      </table>\n      <br />\n      <br />\n\n      <br />\n      <br />\n\n{/* \n      <table>\n        <tr>\n          <th>app (S)</th>\n          <th>day (N)</th>\n          <th>PaymentSheetView_appear_NATIVE (N)</th>\n          <th>app_launch_NATIVE (N)</th>\n          <th>app_launch_SDK (N)</th>\n          <th>approve_NATIVE (N)</th>\n          <th>approve_SDK (N)</th>\n          <th>fail_NATIVE (N)</th>\n          <th>fail_SDK (N)</th>\n          <th>pop_SDK (N)</th>\n          <th>purchase_NATIVE (N)</th>\n          <th>purchase_SDK (N)</th>\n          <th>first_launch (N)</th>\n        </tr>\n\n        {\n          data.map((line, index) => {\n            return (\n              <tr>\n                <td>{line.app}</td>\n                <td>{line[\"day\"]}</td>\n                <td>{line.PaymentSheetView_appear_NATIVE}</td>\n                <td>{line.app_launch_NATIVE}</td>\n                <td>{line.app_launch_SDK}</td>\n                <td>{line[\"approve_NATIVE\"]}</td>\n                <td>{line[\"approve_SDK\"]}</td>\n                <td>{line[\"fail_NATIVE\"]}</td>\n                <td>{line[\"fail_SDK\"]}</td>\n                <td>{line[\"pop_SDK\"]}</td>\n                <td>{line[\"purchase_NATIVE\"]}</td>\n                <td>{line[\"purchase_SDK\"]}</td>\n                <td>{line[\"first_launch\"]}</td>\n\n              </tr>\n\n            );\n\n          })\n        }\n      </table> */}\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}