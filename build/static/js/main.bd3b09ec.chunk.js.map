{"version":3,"sources":["components/Line.js","App.js","reportWebVitals.js","index.js"],"names":["Line","today","Math","floor","Date","now","API_KEY","process","App","useState","data","setData","order","dates","setDates","pass","setPass","login","getData","alert","a","reportsArr","getDataFromLambda","lambdaReport","console","log","map","line","sortRep","daysCheck","fetch","then","json","arr","sort","day1","day2","day","newDates","lastDate","i","length","date","className","onClick","onChange","e","target","value","index","app","toLocaleDateString","PaymentSheetView_appear_NATIVE","app_launch_NATIVE","app_launch_SDK","approve_NATIVE","approve_SDK","fail_NATIVE","fail_SDK","pop_SDK","purchase_NATIVE","purchase_SDK","first_launch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd3b09ec.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nfunction Line(props) {\r\n    return(\r\n        <div>\r\n            {/* {props.line[\"approve (N)\"]} */}\r\n        </div>\r\n    );\r\n    \r\n}\r\nexport default Line;","import React, { useState } from 'react';\r\n\r\nimport reports from './resources/reports.json'\r\nimport './App.css';\r\nimport Line from './components/Line';\r\n\r\n\r\nconst today = Math.floor(Date.now() / 86400000);\r\nconst API_KEY = process.env.REACT_APP_DATA_API_KEY;\r\nconst PASS_KEY = process.env.REACT_APP_PASS_KEY;\r\n\r\n\r\nfunction App() {\r\n  \r\n  const [data, setData] = useState([])\r\n  const [order, setOrder] = useState('htl')\r\n  const [dates, setDates] = useState([])\r\n  const [pass, setPass] = useState('')\r\n\r\n\r\n  const login = () =>{\r\n    if(pass === PASS_KEY){\r\n      getData();\r\n    }else{\r\n      alert(\"wrong passowrd\");\r\n    }\r\n  }\r\n\r\n  async function getData() {\r\n\r\n    let reportsArr = [];\r\n\r\n    let lambdaReport = await getDataFromLambda()\r\n\r\n    console.log(lambdaReport)\r\n\r\n    lambdaReport.map((line) => {\r\n      reportsArr = [...reportsArr, line]\r\n    })\r\n    console.log(reportsArr);\r\n    sortRep(reportsArr);\r\n    daysCheck();\r\n    setData(reportsArr);\r\n\r\n\r\n  }\r\n\r\n  async function getDataFromLambda() {\r\n    return fetch(API_KEY)\r\n      .then(data => data.json())\r\n  }\r\n  \r\n\r\n  function sortRep(arr) {\r\n    if (order === \"lth\") {\r\n      arr.sort((day1, day2) => {\r\n        if (day1.day < day2.day)\r\n          return -1;\r\n        if (day1.day > day2.day)\r\n          return 1;\r\n      });\r\n    } else if (order === \"htl\") {\r\n      arr.sort((day1, day2) => {\r\n        if (day1.day > day2.day)\r\n          return -1;\r\n        if (day1.day < day2.day)\r\n          return 1;\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  const daysCheck = () =>{\r\n    let newDates = [];\r\n\r\n    let lastDate = 0;\r\n    for (let i = 0; i < data.length; i++) {\r\n      if(data[i].date === lastDate){\r\n        lastDate = data[i].date;\r\n        newDates = [...newDates, i]     \r\n       }else{\r\n        continue;\r\n      }\r\n    }\r\n    console.log(\"new dates\" + newDates);\r\n    setDates(newDates);\r\n  }\r\n\r\n  \r\n\r\n  const getDate = (day,index) => {\r\n    // for (let i = 0; i < dates.length; i++) {\r\n    //   if(dates[i] == index){\r\n    //     return \"\";\r\n    //   }\r\n    // }\r\n   if(day === dates){\r\n\r\n      return \"\";\r\n   }else{\r\n     \r\n   }\r\n    \r\n\r\n\r\n    if ((today - day) === 0){\r\n      return \"Today\"\r\n\r\n    }\r\n    else if (today - day === 1){\r\n\r\n      return \"Yesterday\"\r\n\r\n    }\r\n    else {\r\n\r\n      return new Date(day * 86400000).toLocaleDateString()\r\n\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1> Reports</h1>\r\n\r\n      <button onClick={() => { login() }}> show reports</button>\r\n      <input onChange={(e) => setPass(e.target.value)} >  </input>\r\n\r\n      <table>\r\n        <tr>\r\n          <th></th>\r\n          {\r\n            data.map((line, index) => {\r\n              return (\r\n                <th>{line.app} {getDate(line.day,index)}\r\n                </th>\r\n              )\r\n            })\r\n          }\r\n\r\n          <th></th>\r\n        </tr>\r\n\r\n        <tr>\r\n          <th>PaymentSheetView_appear_NATIVE</th>\r\n          {\r\n            data.map((line, index) => {\r\n              return (\r\n                <td>{line.PaymentSheetView_appear_NATIVE}</td>\r\n              )\r\n            })\r\n          }\r\n        </tr>\r\n        <tr>\r\n          <th>app_launch_NATIVE</th>\r\n          {\r\n            data.map((line, index) => {\r\n              return (\r\n                <td>{line.app_launch_NATIVE}</td>\r\n              )\r\n            })\r\n          }\r\n        </tr>\r\n        <tr>\r\n          <th>app_launch_SDK</th>\r\n          {\r\n            data.map((line, index) => {\r\n              return (\r\n                <td>{line.app_launch_SDK}</td>\r\n              )\r\n            })\r\n          }\r\n        </tr>\r\n        <tr>\r\n          <th>approve_NATIVE</th>\r\n          {\r\n            data.map((line, index) => {\r\n              return (\r\n                <td>{line.approve_NATIVE}</td>\r\n              )\r\n            })\r\n          }\r\n        </tr>\r\n        <tr>\r\n          <th>approve_SDK</th>\r\n          {\r\n            data.map((line, index) => {\r\n              return (\r\n                <td>{line.approve_SDK}</td>\r\n              )\r\n            })\r\n          }\r\n        </tr>\r\n        <tr>\r\n          <th>fail_NATIVE</th>\r\n          {\r\n            data.map((line, index) => {\r\n              return (\r\n                <td>{line.fail_NATIVE}</td>\r\n              )\r\n            })\r\n          }\r\n        </tr>\r\n        <tr>\r\n          <th>fail_SDK</th>\r\n          {\r\n            data.map((line, index) => {\r\n              return (\r\n                <td>{line.fail_SDK}</td>\r\n              )\r\n            })\r\n          }\r\n        </tr>\r\n        <tr>\r\n          <th>pop_SDK</th>\r\n          {\r\n            data.map((line, index) => {\r\n              return (\r\n                <td>{line.pop_SDK}</td>\r\n              )\r\n            })\r\n          }\r\n        </tr>\r\n        <tr>\r\n          <th>purchase_NATIVE</th>\r\n          {\r\n            data.map((line, index) => {\r\n              return (\r\n                <td>{line.purchase_NATIVE}</td>\r\n              )\r\n            })\r\n          }\r\n        </tr>\r\n        <tr>\r\n          <th>purchase_SDK</th>\r\n          {\r\n            data.map((line, index) => {\r\n              return (\r\n                <td>{line.purchase_SDK}</td>\r\n              )\r\n            })\r\n          }\r\n        </tr>\r\n        <tr>\r\n          <th>first_launch</th>\r\n          {\r\n            data.map((line, index) => {\r\n              return (\r\n                <td>{line.first_launch}</td>\r\n              )\r\n            })\r\n          }\r\n        </tr>\r\n\r\n      </table>\r\n      <br />\r\n      <br />\r\n\r\n      <br />\r\n      <br />\r\n\r\n      {/* \r\n      <table>\r\n        <tr>\r\n          <th>app (S)</th>\r\n          <th>day (N)</th>\r\n          <th>PaymentSheetView_appear_NATIVE (N)</th>\r\n          <th>app_launch_NATIVE (N)</th>\r\n          <th>app_launch_SDK (N)</th>\r\n          <th>approve_NATIVE (N)</th>\r\n          <th>approve_SDK (N)</th>\r\n          <th>fail_NATIVE (N)</th>\r\n          <th>fail_SDK (N)</th>\r\n          <th>pop_SDK (N)</th>\r\n          <th>purchase_NATIVE (N)</th>\r\n          <th>purchase_SDK (N)</th>\r\n          <th>first_launch (N)</th>\r\n        </tr>\r\n\r\n        {\r\n          data.map((line, index) => {\r\n            return (\r\n              <tr>\r\n                <td>{line.app}</td>\r\n                <td>{line[\"day\"]}</td>\r\n                <td>{line.PaymentSheetView_appear_NATIVE}</td>\r\n                <td>{line.app_launch_NATIVE}</td>\r\n                <td>{line.app_launch_SDK}</td>\r\n                <td>{line[\"approve_NATIVE\"]}</td>\r\n                <td>{line[\"approve_SDK\"]}</td>\r\n                <td>{line[\"fail_NATIVE\"]}</td>\r\n                <td>{line[\"fail_SDK\"]}</td>\r\n                <td>{line[\"pop_SDK\"]}</td>\r\n                <td>{line[\"purchase_NATIVE\"]}</td>\r\n                <td>{line[\"purchase_SDK\"]}</td>\r\n                <td>{line[\"first_launch\"]}</td>\r\n\r\n              </tr>\r\n\r\n            );\r\n\r\n          })\r\n        }\r\n      </table> */}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}