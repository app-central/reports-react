{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","order","a","reportsArr","getDataFromLambda","lambdaReport","console","log","reports","map","line","sortRep","fetch","then","json","arr","sort","day1","day2","className","onClick","getData","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAyGeA,MAjGf,WAAgB,IAAD,EAEWC,mBAAS,CAAC,EAAG,EAAG,EAAG,IAF9B,mBAENC,EAFM,KAEAC,EAFA,OAGaF,mBAAS,OAHtB,mBAGNG,EAHM,iDAKb,8BAAAC,EAAA,6DACMC,EAAa,GADnB,SAG2BC,IAH3B,OAGMC,EAHN,OAKEC,QAAQC,IAAIF,GAEZG,EAAQC,KAAI,SAACC,GACXP,EAAU,sBAAOA,GAAP,CAAmBO,OAE/BJ,QAAQC,IAAIJ,GACZQ,EAAQR,GAERH,EAAQG,GAbV,4CALa,+BAqBEC,IArBF,2EAqBb,sBAAAF,EAAA,+EACSU,MAAM,+EACZC,MAAK,SAAAd,GAAI,OAAIA,EAAKe,WAFrB,4CArBa,sBA0Bb,SAASH,EAAQI,GACF,QAAVd,EACDc,EAAIC,MAAK,SAACC,EAAMC,GACd,OAAID,EAAK,WAAaC,EAAK,YACjB,EACND,EAAK,WAAaC,EAAK,WAClB,OADT,KAGe,QAAVjB,GACPc,EAAIC,MAAK,SAACC,EAAMC,GACd,OAAID,EAAK,WAAaC,EAAK,YACjB,EACND,EAAK,WAAaC,EAAK,WAClB,OADT,KAON,OA7Ca,KA8CX,sBAAKC,UAAU,MAAf,UACE,0CAEA,wBAAQC,QAAS,YAjDR,mCAiDgBC,IAAzB,2BACA,kCACE,+BACE,yCACA,yCACA,oEACA,uDACA,oDACA,oDACA,iDACA,iDACA,8CACA,6CACA,qDACA,kDACA,qDAIAtB,EAAKU,KAAI,SAACC,EAAMY,GACd,OACE,+BACE,6BAAKZ,EAAK,aACV,6BAAKA,EAAK,aACV,6BAAKA,EAAK,wCACV,6BAAKA,EAAK,2BACV,6BAAKA,EAAK,wBACV,6BAAKA,EAAK,wBACV,6BAAKA,EAAK,qBACV,6BAAKA,EAAK,qBACV,6BAAKA,EAAK,kBACV,6BAAKA,EAAK,iBACV,6BAAKA,EAAK,yBACV,6BAAKA,EAAK,sBACV,6BAAKA,EAAK,mCC/EXa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.1a933bb0.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport reports from './resources/reports.json'\nimport './App.css';\nimport Line from './components/Line';\n\n\n\nfunction App() {\n\n  const [data, setData] = useState([1, 2, 3, 4])\n  const [order, setOrder] = useState('htl')\n\n  async function getData() {\n    let reportsArr = [];\n\n    let lambdaReport = await getDataFromLambda()\n\n    console.log(lambdaReport)\n\n    reports.map((line) => {\n      reportsArr = [...reportsArr, line]\n    })\n    console.log(reportsArr);\n    sortRep(reportsArr);\n\n    setData(reportsArr)\n  }\n\n  async function getDataFromLambda(){\n    return fetch('https://pqzj791d65.execute-api.us-east-1.amazonaws.com/default/reports-json')\n    .then(data => data.json())\n  }\n\n  function sortRep(arr) {\n    if(order === \"lth\"){\n      arr.sort((day1, day2) => {\n        if (day1[\"day (N)\"] < day2[\"day (N)\"])\n          return -1;\n        if (day1[\"day (N)\"] > day2[\"day (N)\"])\n          return 1;\n      });  \n    }else if(order === \"htl\"){\n      arr.sort((day1, day2) => {\n        if (day1[\"day (N)\"] > day2[\"day (N)\"])\n          return -1;\n        if (day1[\"day (N)\"] < day2[\"day (N)\"])\n          return 1;\n      });  \n    }\n    \n  }\n\n  return (\n    <div className=\"App\">\n      <h1> Reports</h1>\n      \n      <button onClick={() => { getData() }}> show reports</button>\n      <table>\n        <tr>\n          <th>app (S)</th>\n          <th>day (N)</th>\n          <th>PaymentSheetView_appear_NATIVE (N)</th>\n          <th>app_launch_NATIVE (N)</th>\n          <th>app_launch_SDK (N)</th>\n          <th>approve_NATIVE (N)</th>\n          <th>approve_SDK (N)</th>\n          <th>fail_NATIVE (N)</th>\n          <th>fail_SDK (N)</th>\n          <th>pop_SDK (N)</th>\n          <th>purchase_NATIVE (N)</th>\n          <th>purchase_SDK (N)</th>\n          <th>first_launch (N)</th>\n        </tr>\n\n        {\n          data.map((line, index) => {\n            return (\n              <tr>\n                <td>{line[\"app (S)\"]}</td>\n                <td>{line[\"day (N)\"]}</td>\n                <td>{line[\"PaymentSheetView_appear_NATIVE (N)\"]}</td>\n                <td>{line[\"app_launch_NATIVE (N)\"]}</td>\n                <td>{line[\"app_launch_SDK (N)\"]}</td>\n                <td>{line[\"approve_NATIVE (N)\"]}</td>\n                <td>{line[\"approve_SDK (N)\"]}</td>\n                <td>{line[\"fail_NATIVE (N)\"]}</td>\n                <td>{line[\"fail_SDK (N)\"]}</td>\n                <td>{line[\"pop_SDK (N)\"]}</td>\n                <td>{line[\"purchase_NATIVE (N)\"]}</td>\n                <td>{line[\"purchase_SDK (N)\"]}</td>\n                <td>{line[\"first_launch (N)\"]}</td>\n\n              </tr>\n\n            );\n\n          })\n        }\n      </table>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}