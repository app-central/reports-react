{"version":3,"sources":["components/FilterMenu.js","components/Login.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["today","Date","FilterMenu","props","useState","event","setEvent","x","getFullYear","getMonth","getDate","console","log","start","class","id","onChange","e","target","value","selected","events","map","for","onClick","preventDefault","addEvent","className","resetEvents","clear","Login","onSubmit","login","type","handleSetPass","Table","data","line","index","app","day","Math","floor","now","API_KEY","process","DEFAULT_EVENTS","App","setStart","setData","order","pass","setPass","setEvents","displayedEvents","setDisplayedEvents","a","reportsArr","getDataFromLambda","sortRep","getEvents","fetch","then","json","d","eventsNames","length","i","isNew","j","sort","arr","day1","day2","getData","alert","logout","p","toLocaleDateString","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0bd705c3.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nvar today = new Date();\r\nexport default function FilterMenu(props) {\r\n    const [event, setEvent] = useState(\"\")\r\n    let x = today.getFullYear() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getDate();\r\n    console.log(x);\r\n    const addEvent = (e) => {\r\n        e.preventDefault();\r\n        if (event === \"\") {\r\n\r\n        } else {\r\n            props.addEvent(event);\r\n\r\n        }\r\n    }\r\n\r\n    const resetEvents = (e) => {\r\n        e.preventDefault();\r\n        props.resetEvents();\r\n    }\r\n\r\n    const clear = (e) => {\r\n        e.preventDefault();\r\n        props.clear();\r\n    }\r\n    if (props.start) {\r\n        return (\r\n            <div>\r\n                <form class=\"form-inline\">\r\n                    <div class=\"input-group mb-3\">\r\n\r\n                        <select class=\" custom-select\" id=\"eventselect\" onChange={(e) => { setEvent(e.target.value) }}>\r\n                            <option selected>- - Choose Event - -</option>\r\n\r\n                            {props.events.map((event) => {\r\n                                return (\r\n\r\n                                    <option value={event}>{event} </option>\r\n                                )\r\n                            })}\r\n                        </select>\r\n                        <div class=\"input-group-append\">\r\n                            <button class=\"input-group-text btn btn-secondary\" for=\"eventselect\" onClick={addEvent}>Add Event</button>\r\n\r\n                        </div>\r\n                        <button className=\"btn btn-secondary reset-button\" onClick={resetEvents}>Reset</button>\r\n                        <button className=\"btn btn-danger reset-button\" onClick={clear}>Clear All</button>\r\n\r\n\r\n                    </div>\r\n                    {/* <label for=\"start\">Start date:</label>\r\n\r\n                    <input className=\"date\" type=\"date\" id=\"start\" name=\"trip-start\"\r\n                        min=\"2020-09-26\" max={today.getFullYear() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getDate()} /> */}\r\n\r\n                </form>\r\n\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div></div>\r\n        )\r\n    }\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function Login(props) {\r\n   \r\n\r\n    if (!props.start) {\r\n        return (\r\n            <form onSubmit={() => { props.login() }} className=\"form-box\">\r\n                <label for=\"exampleInputPassword1\">Password</label>\r\n\r\n                <input class=\"form-control\" type=\"password\" onChange={(e) => props.handleSetPass(e.target.value)} />\r\n                <br />\r\n                <button class=\"btn btn-primary mb-2 show-rep-btn\" > show reports</button>\r\n            </form>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                {/* <button class=\"btn btn-primary mb-2\" onClick={() => { props.logout() }}> Back</button> */}\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Table(props) {\r\n    if (props.start) {\r\n        return (\r\n            <div className=\"table-box\">\r\n\r\n                <table class=\"table\">\r\n                    <thead class=\"thead-light\">\r\n                        <tr >\r\n                            <th className=\"ver-th blank-cell\" > </th>\r\n                            {\r\n                                props.data.map((line, index) => {\r\n                                    return (\r\n                                        <th>{line.app} <span className=\"time\"> {props.getDate(line.day, index)}</span>\r\n                                        </th>\r\n                                    )\r\n                                })\r\n                            }\r\n\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    {props.events.map((event) => {\r\n                        return (\r\n                            <tr>\r\n                                <th className=\"ver-th\"     ><span className=\"test\">{event}</span></th>\r\n                                {\r\n                                    props.data.map((line, index) => {\r\n                                        return (\r\n                                            <td>{line.[event]}</td>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </tr>\r\n                        );\r\n                    })\r\n\r\n                    }\r\n\r\n\r\n                    {/* <tr>\r\n                        <th className=\"ver-th\"     >Pop Native</th>\r\n                        {\r\n                            props.data.map((line, index) => {\r\n                                return (\r\n                                    <td>{line.PaymentSheetView_appear_NATIVE}</td>\r\n                                )\r\n                            })\r\n                        }\r\n                    </tr>\r\n                    <tr>\r\n                        <th className=\"ver-th\" >App Launch Native</th>\r\n                        {\r\n                            props.data.map((line, index) => {\r\n                                return (\r\n                                    <td>{line.app_launch_NATIVE}</td>\r\n                                )\r\n                            })\r\n                        }\r\n                    </tr>\r\n                    <tr>\r\n                        <th className=\"ver-th\" >App Launch SDK</th>\r\n                        {\r\n                            props.data.map((line, index) => {\r\n                                return (\r\n                                    <td>{line.app_launch_SDK}</td>\r\n                                )\r\n                            })\r\n                        }\r\n                    </tr>\r\n                    <tr>\r\n                        <th className=\"ver-th\"  >Approve Native</th>\r\n                        {\r\n                            props.data.map((line, index) => {\r\n                                return (\r\n                                    <td>{line.approve_NATIVE}</td>\r\n                                )\r\n                            })\r\n                        }\r\n                    </tr>\r\n                    <tr>\r\n                        <th className=\"ver-th\" >Approve SDK</th>\r\n                        {\r\n                            props.data.map((line, index) => {\r\n                                return (\r\n                                    <td>{line.approve_SDK}</td>\r\n                                )\r\n                            })\r\n                        }\r\n                    </tr>\r\n                    <tr>\r\n                        <th className=\"ver-th\" >Fail Native</th>\r\n                        {\r\n                            props.data.map((line, index) => {\r\n                                return (\r\n                                    <td>{line.fail_NATIVE}</td>\r\n                                )\r\n                            })\r\n                        }\r\n                    </tr>\r\n                    <tr>\r\n                        <th className=\"ver-th\" >Fail SDK</th>\r\n                        {\r\n                            props.data.map((line, index) => {\r\n                                return (\r\n                                    <td>{line.fail_SDK}</td>\r\n                                )\r\n                            })\r\n                        }\r\n                    </tr>\r\n                    <tr>\r\n                        <th className=\"ver-th\" >Pop SDK</th>\r\n                        {\r\n                            props.data.map((line, index) => {\r\n                                return (\r\n                                    <td>{line.pop_SDK}</td>\r\n                                )\r\n                            })\r\n                        }\r\n                    </tr>\r\n                    <tr>\r\n                        <th className=\"ver-th\" >Purchase Native</th>\r\n                        {\r\n                            props.data.map((line, index) => {\r\n                                return (\r\n                                    <td>{line.purchase_NATIVE}</td>\r\n                                )\r\n                            })\r\n                        }\r\n                    </tr>\r\n                    <tr>\r\n                        <th className=\"ver-th\" >Purchase SDK</th>\r\n                        {\r\n                            props.data.map((line, index) => {\r\n                                return (\r\n                                    <td>{line.purchase_SDK}</td>\r\n                                )\r\n                            })\r\n                        }\r\n                    </tr>\r\n                    <tr className=\"bot-tr\">\r\n                        <th className=\"ver-th bot-tr\" >First Launch</th>\r\n                        {\r\n                            props.data.map((line, index) => {\r\n                                return (\r\n                                    <td>{line.first_launch}</td>\r\n                                )\r\n                            })\r\n                        }\r\n                    </tr> */}\r\n\r\n                </table>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n            </div>)\r\n    }\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nimport './App.css';\r\nimport FilterMenu from './components/FilterMenu';\r\nimport Login from './components/Login';\r\nimport Table from './components/Table';\r\n\r\n\r\nconst today = Math.floor(Date.now() / 86400000);\r\nconst API_KEY = process.env.REACT_APP_DATA_API_KEY;\r\nconst PASS_KEY = process.env.REACT_APP_PASS_KEY;\r\nconst DEFAULT_EVENTS = [\"PaymentSheetView_appear_NATIVE\",\"app_launch_NATIVE\",\"app_launch_SDK\",\"approve_NATIVE\",\"approve_SDK\",\"fail_NATIVE\",\"fail_SDK\",\"pop_SDK\",\"purchase_NATIVE\",\"purchase_SDK\",\"first_launch\" ];\r\n\r\nfunction App() {\r\n\r\n  const [start, setStart] = useState(false)\r\n  const [data, setData] = useState([])\r\n  const [order, setOrder] = useState('htl')\r\n  const [pass, setPass] = useState('')\r\n  const [events, setEvents] = useState([])\r\n  const [displayedEvents , setDisplayedEvents] = useState(DEFAULT_EVENTS)\r\n\r\n  const resetEvents = () =>{\r\n    setDisplayedEvents(DEFAULT_EVENTS);\r\n  }\r\n  const clearEvents = () =>{\r\n    setDisplayedEvents([]);\r\n  }\r\n\r\n  const login = () => {\r\n    if (pass === PASS_KEY) {\r\n      getData();\r\n      setStart(true);\r\n    } else {\r\n      alert(\"wrong passowrd\");\r\n    }\r\n  }\r\n  const logout = () => {\r\n    setStart(false)\r\n    setPass(\"\");\r\n  }\r\n\r\n  const handleSetPass = (p) => {\r\n    setPass(p)\r\n  }\r\n\r\n  async function getData() {\r\n\r\n    let reportsArr = [];\r\n\r\n    let lambdaReport = await getDataFromLambda()\r\n\r\n    // console.log(lambdaReport)\r\n\r\n    lambdaReport.map((line) => {\r\n      reportsArr = [...reportsArr, line]\r\n    })\r\n    sortRep(reportsArr);\r\n    // daysCheck();\r\n    console.log(reportsArr);\r\n\r\n    setData(reportsArr);\r\n    getEvents(reportsArr);\r\n\r\n\r\n  }\r\n\r\n  async function getDataFromLambda() {\r\n    return fetch(API_KEY)\r\n      .then(data => data.json())\r\n  }\r\n\r\n  const getEvents = (d) => {\r\n    let eventsNames = [];\r\n    console.log(\"-----test----\" + d.length);\r\n    for (let i = 0; i < d.length; i++) {\r\n\r\n      for (var event in d[i]) {\r\n        let isNew = true;\r\n        for (let j = 0; j < eventsNames.length; j++) {\r\n          if (event === eventsNames[j] || d[i].event === null) {\r\n            isNew = false;\r\n          }\r\n        }\r\n        if (isNew) {\r\n          eventsNames = [...eventsNames, event];\r\n        }\r\n      }\r\n    }\r\n    eventsNames.sort();\r\n    console.log(eventsNames);\r\n    setEvents(eventsNames);\r\n\r\n  }\r\n\r\n  function sortRep(arr) {\r\n    if (order === \"lth\") {\r\n      arr.sort((day1, day2) => {\r\n        if (day1.day < day2.day)\r\n          return -1;\r\n        if (day1.day > day2.day)\r\n          return 1;\r\n      });\r\n    } else if (order === \"htl\") {\r\n      arr.sort((day1, day2) => {\r\n        if (day1.day > day2.day)\r\n          return -1;\r\n        if (day1.day < day2.day)\r\n          return 1;\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  const getDate = (day, index) => {\r\n\r\n    if ((today - day) === 0) {\r\n      return \"Today\"\r\n    }\r\n    else if (today - day === 1) {\r\n      return \"Yesterday\"\r\n    }\r\n    else {\r\n      return new Date(day * 86400000).toLocaleDateString()\r\n    }\r\n  }\r\nconst addEvent = (event) =>{\r\n  console.log(event);\r\n  for (let i = 0; i < displayedEvents.length; i++) {\r\n    if(displayedEvents[i] === event)\r\n      return;\r\n  }\r\n\r\n  setDisplayedEvents([...displayedEvents,event ]);\r\n}\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"header\">\r\n        <h1> Reports</h1>\r\n        <br/> <br/> \r\n        <Login login={login} logout={logout} handleSetPass={handleSetPass} start={start} />\r\n        \r\n      </div>\r\n      <FilterMenu today={today} start={start} clear={clearEvents}  resetEvents={resetEvents} addEvent={addEvent} events={events}  />\r\n\r\n      \r\n\r\n      <Table data={data} getDate={getDate} start={start}  events={displayedEvents}/>\r\n\r\n\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}